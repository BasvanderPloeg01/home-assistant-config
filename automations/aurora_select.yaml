# Manually select a Nanoleaf Aurora loaded-in effect.
- id: aurora_select
  alias: Select Aurora effect
  trigger:
    - platform: state
      entity_id: input_select.aurora_effect

  condition:
    # If no other process is handling the Aurora.
    - condition: state
      entity_id: input_boolean.aurora_semaphore
      state: 'off'

    # If an actual effect is selected.
    - condition: template
      value_template: "{% if not is_state('input_select.aurora_effect', 'Auto') %}true{% endif %}"

  action:
    - service: notify.group
      data:
        title: 'Hass.io'
        message: "aurora_select sent: {{ states('input_select.aurora_effect') }}"

    # Reserve the Aurora.
    - service: input_boolean.turn_on
      entity_id: input_boolean.aurora_semaphore

    # Override the Aurora effect.
    - service: input_boolean.turn_on
      entity_id: input_boolean.aurora_effect_override

    # Send the effect update via Mosquitto.
    - service: mqtt.publish
      data_template:
        topic: 'home/aurora/effect'
        payload: >-
          {
            "name": "{{ states('input_select.aurora_effect') }}"
          }

    # Release the Aurora.
    - service: input_boolean.turn_off
      entity_id: input_boolean.aurora_semaphore

# Return the aurora to its default scheduled effect.
- id: aurora_default
  alias: Default Nanoleaf Aurora effect
  trigger:
    - platform: state
      entity_id: input_select.aurora_effect
      to: Auto

  action:
    - service: notify.group
      data:
        title: 'Hass.io'
        message: "aurora_select reset: {{ states('input_select.aurora_effect') }}"

    # Remove the Aurora effect override.
    - service: input_boolean.turn_off
      entity_id: input_boolean.aurora_effect_override

# Todo convert into AppDeamon because set_options doesn't understand templates.
# see: https://pypkg.com/pypi/homeassistant/f/homeassistant/components/input_select.py
# see: https://home-assistant.io/cookbook/automation_kodi_dynamic_input_select/
# - id: aurora_effects_list
#   alias: List aurora effects
#   trigger:
#     # Every five minutes.
#     - platform: time
#       minutes: /1
#       seconds: 00

#   action:
#     # Populate effects select list.
#     - service: input_select.set_options
#       data_template:
#         entity_id: input_select.aurora_effect
#         options: >
#           "{% for state in states.light.aurora.attributes.effect_list %}"{{ state}}",{% endfor %}"
