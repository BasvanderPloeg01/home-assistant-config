# Change Nanoleaf Aurora based on its loaded-in effects.
- id: aurora_effect
  alias: Apply Aurora effect
  trigger:
    # When an effect is received via MQTT.
    - platform: state
      entity_id: sensor.aurora_effect

  action:
    - service: notify.group
      data:
        title: 'Hass.io'
        message: "aurora_effect received: {{ states('sensor.aurora_effect') }}"

    - service: light.turn_on
      data_template:
        entity_id:
          - light.aurora
        effect: "{{ states('sensor.aurora_effect') }}"

    # - service: light.turn_on
    #   data:
    #     entity_id: light.aurora

    # - service: rest_command.aurora_set_effect
    #   data_template:
    #     name: "{{ states('sensor.aurora_effect') }}"

# Change Nanoleaf Aurora's brightness.
- id: aurora_brightness
  alias: Apply Nanoleaf Aurora brightness
  trigger:
    # When a brightness level is received via MQTT.
    - platform: state
      entity_id: sensor.aurora_brightness

  action:
    - service: notify.group
      data:
        title: 'Hass.io'
        message: "aurora_brightness received: {{ states('sensor.aurora_brightness') }}"

    - delay:
        seconds: 5

    - service: light.turn_on
      data_template:
        entity_id: light.aurora
        brightness: "{{ states('sensor.aurora_brightness') }}"

    # - service: rest_command.aurora_set_brightness
    #   data_template:
    #     brightness: "{{ states('sensor.aurora_brightness') }}"

